# -*- coding: utf-8 -*-
"""House Price Prediction System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NGYFFafNJhk21E6Od8_84zUnbOAAZT1a

**Loading the Dataset**
"""

import pandas as pd

# Load the dataset
file_path = '/content/Housing.csv'
data = pd.read_csv(file_path)

"""**Inspecting the Dataset**"""

# Display basic information about the dataset
print(data.info())

# Display the first few rows of the dataset
print(data.head())

"""**Handle the missing values**"""

# Check for missing values
print(data.isnull().sum())

"""

**Data Preprocessing**"""

# Separate numerical and categorical columns
numerical_features = ['area', 'bedrooms', 'bathrooms', 'stories', 'parking']  # replace with actual numerical columns
categorical_features = ['mainroad', 'guestroom', 'basement', 'hotwaterheating', 'airconditioning', 'prefarea', 'furnishingstatus']  # replace with actual categorical columns

# Fill missing values for numerical columns with median
data[numerical_features] = data[numerical_features].fillna(data[numerical_features].median())

# Fill missing values for categorical columns with the most frequent value
for feature in categorical_features:
    data[feature] = data[feature].fillna(data[feature].mode()[0])

# Normalize numerical features
from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()
data[numerical_features] = scaler.fit_transform(data[numerical_features])

# Encode categorical features using Label Encoding
from sklearn.preprocessing import LabelEncoder

for feature in categorical_features:
    le = LabelEncoder()
    data[feature] = le.fit_transform(data[feature])

"""** Feature Engineering**"""

# Example of creating an interaction feature (e.g., area * number of bedrooms)
data['area_bedrooms'] = data['area'] * data['bedrooms']

# Another example: ratio of bathrooms to bedrooms
data['bath_to_bed_ratio'] = data['bathrooms'] / (data['bedrooms'] + 1)

"""**Model Selection**"""

from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.linear_model import LinearRegression

# Define the target variable and features
X = data.drop('price', axis=1)
y = data['price']

# Split data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train a Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Cross-validation
cv_scores = cross_val_score(model, X_train, y_train, cv=5)
print(f'Cross-validation scores: {cv_scores}')
print(f'Mean CV score: {cv_scores.mean()}')

"""**Model Evaluation**"""

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Predict on test set
y_pred = model.predict(X_test)

# Evaluate model
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Absolute Error: {mae}')
print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r2}')